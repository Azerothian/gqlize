

import {
  GraphQLNonNull,
  GraphQLInputObjectType,
  GraphQLScalarType,
  GraphQLEnumType,
} from "graphql";

import getModelDefinition from "../utils/get-model-def";

function createMutationInput(modelName, model, gqlFields, prefix, allOptional = false) {
  const modelDefinition = getModelDefinition(model);
  let fields = {};
  Object.keys(gqlFields).forEach((fieldName) => {
    const sqlFields = model.fieldRawAttributesMap;
    if (sqlFields[fieldName]) {
      if (!sqlFields[fieldName]._autoGenerated && !sqlFields[fieldName].autoIncrement) { //eslint-disable-line
        let gqlField = gqlFields[fieldName];
        if (allOptional) {
          if (gqlField.type instanceof GraphQLNonNull) {
            gqlField = {type: gqlField.type.ofType};
          }
        }
        if (modelDefinition.override) {
          const overrideFieldDefinition = modelDefinition.override[fieldName];

          if (overrideFieldDefinition) {
            const fieldDefinition = modelDefinition.define[fieldName];
            const allowNull = fieldDefinition.allowNull;
            const type = overrideFieldDefinition.inputType || overrideFieldDefinition.type;
            let name = type.name;
            if (!overrideFieldDefinition.inputType) {
              name += "Input";
            }
            if (allOptional) {
              name = `Optional${name}`;
            }
            let inputType;
            if (!(overrideFieldDefinition.type instanceof GraphQLInputObjectType) &&
              !(overrideFieldDefinition.type instanceof GraphQLScalarType) &&
              !(overrideFieldDefinition.type instanceof GraphQLEnumType)) {
              inputType = new GraphQLInputObjectType({
                name,
                fields: type.fields,
              });
            } else {
              inputType = type;
            }

            if (allowNull || allOptional) {
              gqlField = {type: inputType};
            } else {
              gqlField = {type: new GraphQLNonNull(inputType)};
            }

          }
        }
        fields[fieldName] = gqlField;
      }
    }
  });

  return new GraphQLInputObjectType({
    name: `${modelName}${prefix}Input`,
    fields,
  });
}

export default async function createMutationInputTypes(models, keys, typeCollection, options) {
  return keys.reduce((o, modelName) => {
    if (!typeCollection[modelName]) {
      return o;
    }
    let {fields} = typeCollection[modelName]._typeConfig; //eslint-disable-line
    o[modelName] = {
      required: createMutationInput(modelName, models[modelName], fields, "Required"),
      optional: createMutationInput(modelName, models[modelName], fields, "Optional", true),
    };
    return o;
  }, {});
}
