"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createMutationInputTypes;

var _graphql = require("graphql");

var _getModelDef = _interopRequireDefault(require("../utils/get-model-def"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function createMutationInput(modelName, model, gqlFields, prefix, allOptional = false) {
  const modelDefinition = (0, _getModelDef.default)(model);
  let fields = {};
  Object.keys(gqlFields).forEach(fieldName => {
    const sqlFields = model.fieldRawAttributesMap;

    if (sqlFields[fieldName]) {
      if (!sqlFields[fieldName]._autoGenerated && !sqlFields[fieldName].autoIncrement) {
        //eslint-disable-line
        let gqlField = gqlFields[fieldName];

        if (allOptional) {
          if (gqlField.type instanceof _graphql.GraphQLNonNull) {
            gqlField = {
              type: gqlField.type.ofType
            };
          }
        }

        if (modelDefinition.override) {
          const overrideFieldDefinition = modelDefinition.override[fieldName];

          if (overrideFieldDefinition) {
            const fieldDefinition = modelDefinition.define[fieldName];
            const allowNull = fieldDefinition.allowNull;
            const type = overrideFieldDefinition.inputType || overrideFieldDefinition.type;
            let name = type.name;

            if (!overrideFieldDefinition.inputType) {
              name += "Input";
            }

            if (allOptional) {
              name = `Optional${name}`;
            }

            let inputType;

            if (!(overrideFieldDefinition.type instanceof _graphql.GraphQLInputObjectType) && !(overrideFieldDefinition.type instanceof _graphql.GraphQLScalarType) && !(overrideFieldDefinition.type instanceof _graphql.GraphQLEnumType)) {
              inputType = new _graphql.GraphQLInputObjectType({
                name,
                fields: type.fields
              });
            } else {
              inputType = type;
            }

            if (allowNull || allOptional) {
              gqlField = {
                type: inputType
              };
            } else {
              gqlField = {
                type: new _graphql.GraphQLNonNull(inputType)
              };
            }
          }
        }

        fields[fieldName] = gqlField;
      }
    }
  });
  return new _graphql.GraphQLInputObjectType({
    name: `${modelName}${prefix}Input`,
    fields
  });
}

async function createMutationInputTypes(models, keys, typeCollection, options) {
  return keys.reduce((o, modelName) => {
    if (!typeCollection[modelName]) {
      return o;
    }

    let {
      fields
    } = typeCollection[modelName]._typeConfig; //eslint-disable-line

    o[modelName] = {
      required: createMutationInput(modelName, models[modelName], fields, "Required"),
      optional: createMutationInput(modelName, models[modelName], fields, "Optional", true)
    };
    return o;
  }, {});
}
//# sourceMappingURL=create-input.js.map
