"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _graphql = require("graphql");

var _getModelDef = require("../utils/get-model-def");

var _getModelDef2 = _interopRequireDefault(_getModelDef);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function createMutationInput(modelName, model, gqlFields, prefix, allOptional = false) {
  const modelDefinition = (0, _getModelDef2.default)(model);
  let fields = {};
  Object.keys(gqlFields).forEach(fieldName => {
    const sqlFields = model.fieldRawAttributesMap;
    if (sqlFields[fieldName]) {
      if (!sqlFields[fieldName]._autoGenerated && !sqlFields[fieldName].autoIncrement) {
        //eslint-disable-line
        let gqlField = gqlFields[fieldName];
        if (allOptional) {
          if (gqlField.type instanceof _graphql.GraphQLNonNull) {
            gqlField = { type: gqlField.type.ofType };
          }
        }
        if (modelDefinition.override) {
          const overrideFieldDefinition = modelDefinition.override[fieldName];

          if (overrideFieldDefinition) {
            const fieldDefinition = modelDefinition.define[fieldName];
            const allowNull = fieldDefinition.allowNull;
            const type = overrideFieldDefinition.inputType || overrideFieldDefinition.type;
            let name = type.name;
            if (!overrideFieldDefinition.inputType) {
              name += "Input";
            }
            if (allOptional) {
              name = `Optional${name}`;
            }
            let inputType;
            if (!(overrideFieldDefinition.type instanceof _graphql.GraphQLInputObjectType) && !(overrideFieldDefinition.type instanceof _graphql.GraphQLScalarType) && !(overrideFieldDefinition.type instanceof _graphql.GraphQLEnumType)) {
              inputType = new _graphql.GraphQLInputObjectType({
                name,
                fields: type.fields
              });
            } else {
              inputType = type;
            }

            if (allowNull || allOptional) {
              gqlField = { type: inputType };
            } else {
              gqlField = { type: new _graphql.GraphQLNonNull(inputType) };
            }
          }
        }
        fields[fieldName] = gqlField;
      }
    }
  });

  return new _graphql.GraphQLInputObjectType({
    name: `${modelName}${prefix}Input`,
    fields
  });
}

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (models, keys, typeCollection, options) {
    return keys.reduce(function (o, modelName) {
      if (!typeCollection[modelName]) {
        return o;
      }
      let { fields } = typeCollection[modelName]._typeConfig; //eslint-disable-line
      o[modelName] = {
        required: createMutationInput(modelName, models[modelName], fields, "Required"),
        optional: createMutationInput(modelName, models[modelName], fields, "Optional", true)
      };
      return o;
    }, {});
  });

  function createMutationInputTypes(_x, _x2, _x3, _x4) {
    return _ref.apply(this, arguments);
  }

  return createMutationInputTypes;
})();
//# sourceMappingURL=create-input.js.map
